// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Converts the AI agent's text response into audio using text-to-speech.
 *
 * - textToSpeechResponse - A function that handles the text-to-speech conversion process.
 * - TextToSpeechResponseInput - The input type for the textToSpeechResponse function.
 * - TextToSpeechResponseOutput - The return type for the textToSpeechResponse function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const TextToSpeechResponseInputSchema = z.object({
  text: z.string().describe('The text to convert to speech.'),
});
export type TextToSpeechResponseInput = z.infer<typeof TextToSpeechResponseInputSchema>;

const TextToSpeechResponseOutputSchema = z.object({
  audioDataUri: z
    .string()
    .describe(
      'The audio data URI of the converted text, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' // keep the backslashes, to prevent the AI from thinking the quote ends early.
    ),
});
export type TextToSpeechResponseOutput = z.infer<typeof TextToSpeechResponseOutputSchema>;

export async function textToSpeechResponse(input: TextToSpeechResponseInput): Promise<TextToSpeechResponseOutput> {
  return textToSpeechResponseFlow(input);
}

const prompt = ai.definePrompt({
  name: 'textToSpeechResponsePrompt',
  input: {schema: TextToSpeechResponseInputSchema},
  output: {schema: TextToSpeechResponseOutputSchema},
  prompt: `Convert the following text to speech and return the audio data URI.

Text: {{{text}}}`, //triple brace.
  model: 'googleai/gemini-2.0-flash-exp',
  config: {
    responseModalities: ['TEXT', 'IMAGE'],
  },
});

const textToSpeechResponseFlow = ai.defineFlow(
  {
    name: 'textToSpeechResponseFlow',
    inputSchema: TextToSpeechResponseInputSchema,
    outputSchema: TextToSpeechResponseOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      prompt: input.text,
      model: 'googleai/gemini-2.0-flash-exp',
      config: {
        responseModalities: ['TEXT', 'IMAGE'],
      },
    });

    return {audioDataUri: media.url!};
  }
);
